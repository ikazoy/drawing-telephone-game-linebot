doctype
html(lang="ja")
  head
    meta(charset="utf-8")
    meta(name="viewport", content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0")
    meta(name="description", content="")
    script(src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js")
    script(src="https://code.jquery.com/jquery-3.3.1.min.js")
    script(src="https://cdn.jsdelivr.net/npm/signature_pad@2.3.2/dist/signature_pad.min.js")
    script(src="https://d.line-scdn.net/liff/1.0/sdk.js")
    script(src="https://unpkg.com/axios/dist/axios.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/jquery-loading-overlay/2.1.6/loadingoverlay.min.js")
    style(type="text/css").
      table {
        width: 100%
      }
      .divider {
        width: 15px;
        height: auto;
        display: inline-block;
      }
      .countdown-timer {
        float: right;
      }
      @keyframes blink {
        75% { opacity: 0.0; }
      }
      @-webkit-keyframes blink {
        75% { opacity: 0.0; }
      }
      .warning {
        color: red;
        animation: blink 1s step-end infinite;
        -webkit-animation: blink 1s step-end infinite;
      }

body
  //- TODO: one time token
  #theme
  .container
    canvas#canvas
    button#btn.btn.btn-primary.btn-block(type="button") 送信
    .divider
    button#undo.btn.btn-primary.btn-block(type="button") 一つ戻る
    span.countdown-timer 残り時間 <span id="time"></span>

    script.
      // save image
      const saveImage = () => {
        const params = (new URL(document.location)).searchParams;
        const bundleId = (params != null && params.has("bundleId")) ? params.get("bundleId") : null;
        const gameId = (params != null && params.has("bundleId")) ? params.get("gameId") : null;
        const userId = (params != null && params.has("userId")) ? params.get("userId") : null;
        const currentIndex = (params != null && params.has("currentIndex")) ? params.get("currentIndex") : null;
        const currentPath = window.location.pathname;
        const saveImagePath = currentPath.replace(/\/liff/, '/saveimage')
        $.LoadingOverlay("show");

        $.ajax({
          type: 'POST',
          url: saveImagePath,
          data: {
            'image': signaturePad.toDataURL('image/jpeg'),
            bundleId,
            gameId,
            currentIndex,
            userId,
          },
          success: function (res, status) {
            console.log('res', res);
            if (!res.success) {
              window.alert('request to /saveimage failed.')
              window.alert(res.message);
            }
            if (userId != null) {
              liff.getProfile().then(function (profile) {
                liff.sendMessages([
                  {
                    type: 'image',
                    originalContentUrl: res.filePath,
                    previewImageUrl: res.filePath
                  }
                ]).then(function () {
                  liff.closeWindow();
                }).catch(function (error) {
                  window.alert('Error sending message: ' + error.message);
                });
              }).catch(function (error) {
                  window.alert("Error getting profile: " + error.message);
              });
            } else {
              console.log('closing liff window');
            }
          },
          error: function (res) {
            $.LoadingOverlay("hide");
            window.alert('Error saving image: ' + res.status);
          },
          complete: function(data) {
          }
        });
      };
      $('#btn').on('click', saveImage);

      // countdown timer
      function startTimer(duration, display, callback) {
        let left = duration;
        let dom = display;
        let minutes = 0;
        let seconds = 0;
        const isWarning = 20;
        // in millisecond
        const interval = 1000;
        setInterval(() => {
            minutes = parseInt(left / 60, 10)
            seconds = parseInt(left % 60, 10);

            minutes = minutes < 10 ? "0" + minutes : minutes;
            seconds = seconds < 10 ? "0" + seconds : seconds;

            dom.textContent = minutes + ":" + seconds;

            // process after timer reaches 0
            left -= (interval / 1000)
            console.log('left', left)
            if (left < isWarning) {
              dom.classList.add('warning');
            }
            if (left == 0) {
              callback();
            }
        }, interval);
      }
      $(window).on('load', () => {
        const duration = 60;
        const display = document.querySelector('#time');
        startTimer(duration, display, saveImage);
        //- startTimer(duration, display, callbackFunc);
      });
      // canvas
      const canvas = document.querySelector('#canvas');
      const signaturePad = new SignaturePad(canvas, {
        backgroundColor: 'rgb(238,238,238)',
      });
      $(window).on('load', function(){
        canvas.setAttribute('width', $('.container').width());
        canvas.setAttribute('height', window.innerHeight - $('#btn').outerHeight() - 25);
        signaturePad.clear();
        liff.init(function (data) {});
        document.getElementById('undo').addEventListener('click', function () {
          const data = signaturePad.toData();
          if (data) {
            data.pop(); // remove the last dot or line
            signaturePad.fromData(data);
          }
        });
      });