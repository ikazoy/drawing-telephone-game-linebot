service: liff-test

# 実行環境に関する設定
provider:
  name: aws
  runtime: nodejs8.10
  region: ap-northeast-1
  profile: giboshi31
  stage: ${opt::stage, 'development'}
  environment:
    NODE_ENV: ${opt:stage, self:provider.stage}
    GAMES_DYNAMODB_TABLE: ${self:service}-games-${opt:stage, self:provider.stage}
    OLD_GAMES_DYNAMODB_TABLE: ${self:service}-old-games-${opt:stage, self:provider.stage}
    USERS_DYNAMODB_TABLE: ${self:service}-users-${opt:stage, self:provider.stage}
  iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:*"
        Resource:
          - { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ]]}
          - "arn:aws:s3:::drawing-telephone-game-linebot-images-${opt:stage, self:provider.stage}/*"
      - Effect: "Allow"
        Action:
          - "lambda:InvokeFunction"
        Resource:
          - "*"
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
        Resource:
          - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.GAMES_DYNAMODB_TABLE}"
          - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.OLD_GAMES_DYNAMODB_TABLE}"
          - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_DYNAMODB_TABLE}"
resources:
  Resources:
    GamesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "BundleId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "BundleId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.GAMES_DYNAMODB_TABLE}
    OldGamesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "BundleId"
            AttributeType: "S"
          -
            AttributeName: "CreatedAt"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "BundleId"
            KeyType: "HASH"
          - 
            AttributeName: "CreatedAt"
            KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.OLD_GAMES_DYNAMODB_TABLE}
    UsersDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "UserId"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "UserId"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USERS_DYNAMODB_TABLE}

plugins:
  - serverless-webpack
  - serverless-finch
  # - serverless-dynamodb-local
  - serverless-offline

custom:
  client:
    bucketName: drawing-telephone-game-liff-static-${opt:stage, self:provider.stage}
    distributionFolder: liff/dist
  webpack:
    includeModules: true
    packager: 'yarn'      # Defaults to npm
    packagerOptions: {}   # Optional, depending on the selected packager
#   dynamodb:
#   # If you only want to use DynamoDB Local in some stages, declare them here
#     stages:
#       - dev
#     start:
#       port: 8000
#       migrate: true

# デプロイ時のパッケージの内容について
package:
  exclude:
    - liff/**
  individually: true

functions:
  webhook:
    handler: messageIndex.handler
    events:
      - http:
          path: /webhook
          method: post
          cors: true
  openLiff:
    handler: liffIndex.handler
    events:
      - http:
          path: /liff
          method: get
          cors: true
  saveImage:
    handler: liffIndex.handler
    events:
      - http:
          path: /saveimage
          method: post
          cors: true
  swapTheme:
    handler: liffIndex.handler
    events:
      - http:
          path: /swaptheme
          method: post
          cors: true
  nextMessage:
    handler: liffIndex.handler
    events:
      - http:
          path: /nextmessage
          method: get
          cors: true
  latestGame:
    handler: liffIndex.handler
    events:
      - http:
          path: /latestgame
          method: get
          cors: true
  sendNext:
    handler: handler.sendNext
  triggeredBySavedImage:
    handler: handler.triggeredBySavedImage
    events:
      - s3:
          bucket: drawing-telephone-game-linebot-images-${opt:stage, self:provider.stage}
          event: s3:ObjectCreated:*